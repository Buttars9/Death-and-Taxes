---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\controllers\downloadController.js ---- 
import dbConnect from '../../lib/dbConnect';
import Filing from '../models/Filing';
import { buildFilingPDF } from '../../api/utils/pdfBuilder';

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Only GET requests allowed' });
  }

  await dbConnect();

  const { filingId } = req.query;

  if (!filingId) {
    return res.status(400).json({ error: 'Missing filingId parameter' });
  }

  try {
    const filing = await Filing.findById(filingId);
    if (!filing) {
      return res.status(404).json({ error: 'Filing not found' });
    }

    // üîê Mandatory: validate user access to this filing
    if (!req.user || req.user.id !== filing.userId.toString()) {
      console.warn(`[SECURITY] Unauthorized access attempt by user ${req.user?.id}`);
      return res.status(403).json({ error: 'Unauthorized access' });
    }

    const pdfBuffer = await buildFilingPDF({
      refund: filing.refund,
      signature: filing.signature,
    });

    // üìú Audit log
    console.log(`[AUDIT][DOWNLOAD] Filing ${filingId} downloaded by user ${req.user?.id} at ${new Date().toISOString()}`);

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader(
      'Content-Disposition',
      `attachment; filename=filing-${filingId}.pdf`
    );
    return res.status(200).send(pdfBuffer);
  } catch (err) {
    console.error(`[ERROR] Download failed for filing ${filingId}:`, err);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\controllers\filingController.js ---- 
import dbConnect from '../../lib/dbConnect';
import Filing from '../models/Filing';
import { buildFilingPDF } from '../utils/pdfBuilder';
import { stageToVault } from '../utils/vaultUploader';
import { sendFilingConfirmation } from '../utils/emailSender';
import { calculateRefund } from '../../shared/utils/refundEngine';

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST requests allowed' });
  }

  await dbConnect();

  try {
    const { refund, signature } = req.body;

    if (!refund || !signature) {
      return res.status(400).json({ error: 'Missing refund or signature' });
    }

    // ‚úÖ Recalculate refund server-side
    const verifiedRefund = calculateRefund({
      state: refund.state,
      filingStatus: refund.filingStatus,
      income: refund.income,
      dependents: refund.dependents,
    });

    const newFiling = new Filing({
      refund: verifiedRefund,
      signature,
    });

    await newFiling.save();

    const pdfBuffer = await buildFilingPDF({
      refund: verifiedRefund,
      signature,
    });

    const vaultFileName = `filing-${newFiling._id}.pdf`;
    const vaultResult = await stageToVault(pdfBuffer, vaultFileName);

    const userEmail = refund.userEmail || 'user@example.com';
    await sendFilingConfirmation(userEmail, {
      refund: verifiedRefund,
      filingId: newFiling._id,
      vaultUrl: vaultResult.vaultUrl,
    });

    // üìú Audit log
    console.log(`[AUDIT][SUBMIT] Filing ${newFiling._id} submitted by ${userEmail} at ${new Date().toISOString()}`);

    return res.status(200).json({
      success: true,
      filingId: newFiling._id,
      submittedAt: newFiling.submittedAt,
      vaultUrl: vaultResult.vaultUrl,
    });
  } catch (err) {
    console.error(`[ERROR] Filing submission failed:`, err);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\controllers\finalize.js ---- 
// death-and-taxes/api/controllers/finalize.js

// üìç Path diagnostics
console.log('Running finalize.js from:', import.meta.url);
console.log('Expecting refundEngine.js at:', new URL('../../shared/utils/refundEngine.js', import.meta.url).href);

import { calculateRefund } from '../../shared/utils/refundEngine.js';
import { persistHash } from '../../server/utils/vaultHasher.js';

export async function finalizeReturn(req, res) {
  try {
    const { refund, signature, will, filingAnswers } = req.body;

    if (!signature) {
      return res.status(400).json({ error: 'Missing signature' });
    }

    if (!filingAnswers && !refund) {
      return res.status(400).json({ error: 'Missing refund data' });
    }

    // üß† Recalculate refund if filingAnswers are present
    const verifiedRefund = filingAnswers
      ? calculateRefund({
          state: filingAnswers.state,
          filingStatus: filingAnswers.filingStatus,
          income: filingAnswers.agi,
          dependents: filingAnswers.dependents?.length || 0,
        })
      : refund;

    // üîê Persist hash for audit trail
    persistHash(verifiedRefund?.filingStatus || 'unknown', {
      refund: verifiedRefund,
      signature,
      will,
    });

    // üßæ Simulate return ID and user ID
    const returnId = `RET-${Date.now()}`;
    const userId = `USER-${Math.floor(Math.random() * 1000000)}`; // Replace with real user context when available

    // ‚úÖ Simulate trust confirmation
    const trustConfirmed = true;

    // üìú Audit log
    console.log(`[AUDIT][FINALIZE] Finalized return ${returnId} for ${verifiedRefund?.filingStatus || 'unknown'} at ${new Date().toISOString()}`);

    // ‚úÖ Respond with confirmation and metadata
    return res.status(200).json({
      id: returnId,
      status: 'submitted',
      refundAmount: verifiedRefund?.amount || 0,
      trustConfirmed,
      userId,
      refund: verifiedRefund,
    });
  } catch (err) {
    console.error('[ERROR] Finalize failed:', err);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\models\Filing.js ---- 
// death-and-taxes/api/models/Filing.js

import mongoose from 'mongoose';

const FilingSchema = new mongoose.Schema({
  refund: {
    state: String,
    filingStatus: String,
    income: Number,
    dependents: Number,
    deduction: Number,
    notes: String,
    total: Number,
  },
  signature: {
    type: String,
    required: true,
  },
  submittedAt: {
    type: Date,
    default: Date.now,
  },
});

export default mongoose.models.Filing || mongoose.model('Filing', FilingSchema);.
---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\utils\emailSender.js ---- 
// death-and-taxes/api/utils/emailSender.js

export async function sendFilingConfirmation(to, { refund, filingId, vaultUrl }) {
  if (!to || !refund || !filingId || !vaultUrl) {
    throw new Error('Missing email confirmation parameters');
  }

  // üßæ Compose message
  const subject = `Your Tax Filing Receipt`;
  const body = `
    Thanks for filing with Death and Taxes.

    Filing ID: ${filingId}
    Refund Estimate: $${refund.amount ?? 'N/A'}
    Receipt URL: ${vaultUrl}

    We'll notify you when your refund is confirmed on-chain.
  `.trim();

  // üì¨ Log to console for now
  console.log(`[AUDIT][EMAIL] Sending confirmation to ${to}`);
  console.log(subject);
  console.log(body);

  return { success: true, mockSent: true };
}.
---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\utils\pdfBuilder.js ---- 
// death-and-taxes/api/utils/pdfBuilder.js

import PDFDocument from 'pdfkit';
import getStream from 'get-stream';

export async function buildFilingPDF({ refund, signature }) {
  const doc = new PDFDocument();
  doc.fontSize(18).text('üßæ Filing Receipt', { align: 'center' }).moveDown();

  doc.fontSize(12).text(`State: ${refund.state}`);
  doc.text(`Filing Status: ${refund.filingStatus}`);
  doc.text(`Income: $${refund.income != null ? refund.income.toLocaleString() : 'N/A'}`);
  doc.text(`Dependents: ${refund.dependents}`);
  doc.text(`Deduction: $${refund.deduction != null ? refund.deduction.toLocaleString() : 'N/A'}`);
  doc.text(`Refund Total: $${refund.total != null ? refund.total.toLocaleString() : 'N/A'}`);
  doc.moveDown().text(`Signature: ${signature}`);

  doc.end();

  const buffer = await getStream.buffer(doc);
  return buffer;
}.
---- FILE: C:\Users\austi\OneDrive\Desktop\Powered by PI\death and taxes\api\utils\vaultUploader.js ---- 
// death-and-taxes/api/utils/vaultUploader.js

import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

const writeFile = promisify(fs.writeFile);

export async function stageToVault(buffer, filename) {
  const vaultDir = path.join(process.cwd(), 'vault-storage');
  const filePath = path.join(vaultDir, filename);

  // Ensure directory exists
  if (!fs.existsSync(vaultDir)) {
    fs.mkdirSync(vaultDir, { recursive: true });
  }

  await writeFile(filePath, buffer);

  return {
    success: true,
    path: filePath,
    vaultUrl: `/vault-storage/${filename}` // Placeholder for future cloud URL
  };
}.
